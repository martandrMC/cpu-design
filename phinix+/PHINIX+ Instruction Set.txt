 ____________________________________________________________________________________
/                                                                                    \
| Pipelined Highspeed INteger Instruction eXecutor Plus Instruction Set Architecture |
|                                                                                    |
\____________________________________________________________________________________/

============================Instruction Formats / Registers / Conditions============================
	_________________________________________________________________________
	| Instruction Formats                                                   |
	|_______________________________________________________________________|
	| Bs |[     OPC-8     | SRC-4 | DST-4 ]=================================|
	| Bl |[     OPC-8     | SRC-4 | DST-4 ][             IMM-16            ]|
	| Us |[     OPC-8     | IMM-4 | DST-4 ]=================================|
	| Ul |[ OPC-4 |     IMM-8     | DST-4 ]=================================|
	| N  |[     OPC-8     |     IMM-8     ]=================================|
	|____|__________________________________________________________________|
	_____________________________________		____________________________________________
	| Primary Register File             |		| Secondary Register File                  |
	|___________________________________|		|__________________________________________|
	| x0 | $zr | Constant Zero | None   |		| y0 | $a3 | Argument             | Caller |
	| x1 | $at | Asm Temporary | Caller |		| y1 | $a4 | Argument             | Caller |
	| x2 | $rp | Return Pointer| Caller |		| y2 | $a5 | Argument             | Caller |
	| x3 | $a0 | Argument      | Caller |		| y3 | $t3 | Temporary            | Caller |
	| x4 | $a1 | Argument      | Caller |		| y4 | $t4 | Temporary            | Caller |
	| x5 | $a2 | Argument      | Caller |		| y5 | $t5 | Temporary            | Caller |
	| x6 | $t0 | Temporary     | Caller |		| y6 | $s6 | Saved Pointer        | Callee |
	| x7 | $t1 | Temporary     | Caller |		| y7 | $s7 | Saved Pointer        | Callee |
	| x8 | $t2 | Temporary     | Caller |		| y8 | $s8 | Saved Pointer        | Callee |
	| x9 | $s0 | Saved Value   | Callee |		| y9 | $s9 | Saved Pointer        | Callee |
	| xA | $s1 | Saved Value   | Callee |		| yA | $gp | Global Pointer       | Callee |
	| xB | $s2 | Saved Value   | Callee |		| yB | $sp | User Stack Pointer   | Callee |
	| xC | $s3 | Saved Value   | Callee |		| yC | $k0 | System Register      | Callee | *1
	| xD | $s4 | Saved Value   | Callee |		| yD | $k1 | System Register      | Callee | *1
	| xE | $s5 | Saved Value   | Callee |		| yE | $k2 | System Register      | Callee | *1
	| xF | $fp | Frame Pointer | Callee |		| yF | $kp | System Stack Pointer | Callee | *1
	|____|_____|_______________|________|		|____|_____|______________________|________|
	
	*1	Access allowed only when privileged
	______________________________________
	| Special Purpose Registers          |
	|____________________________________|
	| $st | Status Register     | Caller | *2
	| $rf | Condition Reference | Callee |
	| $ip | Instruction Pointer | None   |
	| $jp | Interrupt Saved $ip | None   | *3
	|_____|_____________________|________|
	
	*2	Bit layout as follows: [ NVCZ xxxx xxxx  GGGG ]
		G: General purpose signaling outputs
			(G1 intended to signal syscall, G0 intended to signal halt)
		NVZC: {Negative, Overflow, Zero, Carry} ALU flags
		x: Unused
	*3	Interrupt enter: [ Save return to $jp ; Jump to ISR ]
		Interrupt leave: [ Restore from $jp (LIP instruction) ]
	___________________________________________________
	| Conditions (Derived from flags)                 |
	|_________________________________________________|
	| 000 | Carry / Above or Equal | cr/ae | C        |
	| 001 | Overflow               | ov    | V        |
	| 010 | Zero / Equal           | ze/eq | Z        |
	| 011 | Non-Zero / Unequal     | nz/nq | ~Z       |
	| 100 | Not-Carry / Below      | nc/bl | ~C       |
	| 101 | Below or Equal         | be    | ~C + Z   |
	| 110 | Less                   | lt    | N!=V     |
	| 111 | Less or Equal          | le    | N!=V + Z |
	|_____|________________________|_______|__________|
	______________________________________________
	| Properties (Derived from data)             |
	|____________________________________________|
	| 000 | Zero          | zer | ~| rx          |
	| 001 | Reference     | ref | & (rx ~^ $rf)  |
	| 010 | Negative      | neg | rx[15]         |
	| 011 | Odd           | odd | rx[0]          |
	| 100 | Non-Zero      | nzr | | rx           |
	| 101 | Non-Reference | nrf | ~& (rx ~^ $rf) |
	| 110 | Positive      | pos | ~rx[15]        |
	| 111 | Even          | evn | ~rx[0]         |
	|_____|_______________|_____|________________|
	
	Note: All instructions not shown to modify $ip, cause it instead to increment.

=======================================Arithmetic Instructions======================================20

	Bs | ADDrx | Primary Register Add               | xD += xS                |
	Bs | ADDry | Secondary Register Add             | yD += xS                |
	Bs | ADDc  | Register Add-Carry                 | xD += xS + C            |
	Bs | SUBrx | Primary Register Subtract          | xD -= xS                |
	Bs | SUBry | Secondary Register Subtract        | yD -= xS                |
	Bs | SUBc  | Register Subtract-Carry            | xD -= xS + !C           |
	
	Bl | ADDix | Primary Immediate Add              | xD = xS + Im16          |
	Bl | ADDiy | Secondary Immediate Add            | yD = xS + Im16          |
	Us | ADDsx | Primary Small Immediate Add        | xD += Im4 + 1           |
	Us | ADDsy | Secondary Small Immediate Add      | yD += Im4 + 1           |
	Us | SUBsx | Primary Small Immediate Subtract   | xD -= Im4 + 1           |
	Us | SUBsy | Secondary Small Immediate Subtract | yD -= Im4 + 1           |
	
	Bs | CMPx  | Primary Register Compare           | $zr = xD - xS           |
	Bs | CMPy  | Secondary Register Compare         | $zr = yD - yS           |
	
	Bs | MULr  | Register Low Multiply              | xD = (xD * xS)[15:0]    |
	Bl | MULi  | Immediate Low Multiply             | xD = (xS * Im16)[15:0]  |
	Bs | UMLr  | Unsigned Register High Multiply    | xD = (xD * xS)[31:16]   |
	Bs | SMLr  | Signed Register High Multiply      | xD = (xD * xS)[31:16]   |
	Bl | UMLi  | Unsigned Immediate High Multiply   | xD = (xS * Im16)[31:16] |
	Bl | SMLi  | Signed Immediate High Multiply     | xD = (xS * Im16)[31:16] |

=====================================Bitwise Logic Instructions=====================================12

	Bs | ANDr  | Register Bitwise AND  | xD &= xS          |
	Bs | NNDr  | Register Bitwise NND  | xD = ~(xD & xS)   |
	Bs | IORr  | Register Bitwise IOR  | xD |= xS          |
	Bs | NORr  | Register Bitwise NOR  | xD = ~(xD | xS)   |
	Bs | XORr  | Register Bitwise XOR  | xD ^= xS          |
	
	Bl | ANDi  | Immediate Bitwise AND | xD = xS & Im16    |
	Bl | NNDi  | Immediate Bitwise NND | xD = ~(xS & Im16) |
	Bl | IORi  | Immediate Bitwise IOR | xD = xS | Im16    |
	Bl | NORi  | Immediate Bitwise NOR | xD = ~(xS | Im16) |
	Bl | XORi  | Immediate Bitwise XOR | xD = xS ^ Im16    |
	
	Bl | PEN   | Permute Nibbles       | xD = p(xS, Im16)  |
	Bl | PEB   | Permute Nibble Bits   | xD = p'(xS, Im16) |

========================================Bitshift Instructions=======================================12

	Bs | LSR   | Logical Shift Right                     | xD = xS >> 1 (Logical)            |
	Bs | LCR   | Logical Shift-Carry Right               | xD = xS >> 1 (Logical Thru Carry) |
	Bs | LBRr  | Logical Barrel-Shift Right Register     | xD >>= xS[3:0] (Logical)          |
	Us | LBRs  | Logical Barrel-Shift Right Immediate    | xD >>= Im4 (Logical)              |
	
	Bs | LSL   | Logical Shift Left                      | xD = xS << 1 (Logical)            |
	Bs | LCL   | Logical Shift-Carry Left                | xD = xS << 1 (Logical Thru Carry) |
	Bs | LBLr  | Logical Barrel-Shift Left Register      | xD <<= xS[3:0] (Logical)          |
	Us | LBLs  | Logical Barrel-Shift Left Immediate     | xD <<= Im4 (Logical)              |
	
	Bs | ASR   | Arithmetic Shift Right                  | xD = xS >> 1 (Arithmetic)         |
	   |       | *Intentional Blank*                     |                                   |
	Bs | ABRr  | Arithmetic Barrel-Shift Right Register  | xD >>= xS[3:0] (Arithmetic)       |
	Us | ABRs  | Arithmetic Barrel-Shift Right Immediate | xD >>= Im4 (Arithmetic)           |

===================================Bit Manipulation Instructions====================================12

	Bs | BXTr  | Register-Indexed Register Bit Extract              | C = xD[xS[3:0]]              |
	Us | BXTs  | Immediate-Indexed Register Bit Extract             | C = xD[Im4]                  |
	Bs | BDPr  | Register-Indexed Register Bit Deposit              | xD[xS[3:0]] = C              |
	Us | BDPs  | Immediate-Indexed Register Bit Deposit             | xD[Im4] = C                  |
	Bs | BNGr  | Register-Indexed Register Bit Negate               | xD[xS[3:0]] = !xD[xS[3:0]]   |
	Us | BNGs  | Immediate-Indexed Register Bit Negate              | xD[Im4] = !xD[Im4]           |
	
	Bs | RXTr  | Register-Indexed Reference Register Bit Extract    | C = $rf[xS[3:0]]             |
	Us | RXTs  | Immediate-Indexed Reference Register Bit Extract   | C = $rf[Im4]                 |
	Bs | RDPr  | Register-Indexed Reference Register Bit Deposit    | $rf[xS[3:0]] = C             |
	Us | RDPs  | Immediate-Indexed Reference Register Bit Deposit   | $rf[Im4] = C                 |
	Bs | RBRr  | Register-Indexed Reference Register Bit Broadcast  | xD = {16{$rf[xS[3:0]]}}      |
	Us | RBRs  | Immediate-Indexed Reference Register Bit Broadcast | xD = {16{$rf[Im4]}}          |
	
======================================Control Flow Instructions=====================================60

	Bs | BRCr  | Register Addressed Branch on Condtion     | CND ?    $ip = xS              |
	Bs | BRPr  | Register Addressed Branch on Property     | PRP-xD ? $ip = xS              |
	Bl | BRCi  | Base/Offset Addressed Branch on Condition | CND ?    $ip = xS + Im16       |
	Bl | BRPi  | Base/Offset Addressed Branch on Property  | PRP-xD ? $ip = xS + Im16       |
	N  | BRCo  | Small Offset Branch on Condition          | CND ?    $ip += SXT(Im8)       |
	
	Bl | JNL   | Jump and Link                             | xD = $ip + 2 ; $ip = xS + Im16 |
	N  | JMPo  | Small Offset Jump                         | $ip += SXT(Im8)                |
	
	Bs | PRDC  | Condition Predicate                       | !CND ? Skip next instr         |
	Bs | PRDP  | Property Predicate                        | !PRP-xD ? Skip next instr      |
	Us | PRDR  | Reference Predicate                       | !rf[Im4] ? Skip next instr     |

============================Compound Condition Manipulation™ Instructions===========================36

	Us | RBCC  | Bit Conjunction of Reference Register on Condition | $rf[Im4] &= CND        |
	Us | RBDC  | Bit Disjunction of Reference Register on Condition | $rf[Im4] |= CND        |
	Us | RBCP  | Bit Conjunction of Reference Register on Property  | $rf[Im4] &= PRP-xD     |
	Us | RBDP  | Bit Disjunction of Reference Register on Property  | $rf[Im4] |= PRP-xD     |
	
	N  | RBM   | Reference Register Bit Move                        | $rf[Im4a] = $rf[Im4b]  |
	N  | RBN   | Reference Register Bit Negate                      | $rf[Im4a] = !$rf[Im4b] |
	N  | RBC   | Reference Register Bit Conjunction                 | $rf[Im4a] &= $rf[Im4b] |
	N  | RBD   | Reference Register Bit Disjunction                 | $rf[Im4a] |= $rf[Im4b] |

=====================================Memory Access Instructions=====================================52

	Bs | LDrx  | Register Addressed Memory Load to Register       | xD = (xS)        |
	Bs | STrx  | Register Addressed Memory Store from Register    | (xS) = xD        |
	Bs | LDry  | Register Addressed Memory Load to Register       | xD = (yS)        |*
	Bs | STry  | Register Addressed Memory Store from Register    | (yS) = xD        |*
	
	Bl | LDix  | Base/Offset Addressed Memory Load to Register    | xD = (xS + Im16) |
	Bl | STix  | Base/Offset Addressed Memory Store from Register | (xS + Im16) = xD |
	Bl | LDiy  | Base/Offset Addressed Memory Load to Register    | xD = (yS + Im16) |*
	Bl | STiy  | Base/Offset Addressed Memory Store from Register | (yS + Im16) = xD |*
	
	Ul | INP   | I/O Port Read to Register                        | xD = {Im8}       |
	Ul | OUT   | I/O Port Write from Register                     | {Im8} = xD       |
	
	* Supports pointer auto-modify

=====================================Data Movement Instructions=====================================44

	Bs | MOVxx | Move Primary to Primary               | xD = xS            |
	Bs | MOVyx | Move Primary to Secondary             | yD = xS            |
	Bs | MOVxy | Move Secondary to Primary             | xD = yS            |
	Bs | MOVyy | Move Secondary to Secondary           | yD = yS            |
	
	Bs | LST   | Load Status Register from Register    | $st = xS           |
	Bs | SST   | Store Status Register to Register     | xD = $st           |
	Bs | LRF   | Load Reference Register from Register | $rf = xS           |
	Bs | SRF   | Store Reference Register to Register  | xD = $rf           |
	Bs | LJP   | Load $jp from Register                | $jp = xS           |
	Bs | SJP   | Store $jp to Register                 | xD = $jp           |
	
	Bs | RELr  | Prepare Register-Relative Address   | yD = $ip + xS + 1   |
	Us | RELs  | Prepare Immediate-Relative Address  | yD = $ip + Im4 + 1  |
	Bs | RST   | Restore $ip and Return to Userspace | $ip = $jp           |
	Us | SIG   | Toggle Status Register Bit          | $st[Im4] = !st[Im4] |
	
	Ul | LSI   | Small Immediate Load to Register    | xD = SXT(Im8)       |
	Ul | LUI   | Upper Immediate Load to Register    | xD[15:8] = Im8      |

=============================================Opcode Map=============================================
	_______________________________________________________________________________
	| OPCODE | INSTR || OPCODE | INSTR | NVCZ || OPCODE | INSTR || OPCODE | INSTR |
	|________|_______||________|_______|______||________|_______||________|_______|
	|00000000| SIG   ||01000000| ADDrx | **** ||10000000| LSI   ||11000000| BRCr  |
	|00000001| MOVxx ||01000001| ADDry | **** ||10000001| -/-   ||11000001| -/-   |
	|00000010| MOVyx ||01000010| ADDix | **** ||10000010| -/-   ||11000010| -/-   |
	|00000011| MOVxy ||01000011| ADDiy | **** ||10000011| -/-   ||11000011| -/-   |
	|00000100| MOVyy ||01000100| ADDsx | **** ||10000100| -/-   ||11000100| -/-   |
	|00000101| LST   ||01000101| ADDsy | **** ||10000101| -/-   ||11000101| -/-   |
	|00000110| SST   ||01000110| ADDc  | **** ||10000110| -/-   ||11000110| -/-   |
	|00000111| LRF   ||01000111| SUBrx | **** ||10000111| -/-   ||11000111| -/-   |
	|00001000| SRF   ||01001000| SUBry | **** ||10001000| -/-   ||11001000| BRPr  |
	|00001001| LJP   ||01001001| SUBsx | **** ||10001001| -/-   ||11001001| -/-   |
	|00001010| SJP   ||01001010| SUBsy | **** ||10001010| -/-   ||11001010| -/-   |
	|00001011| RELr  ||01001011| SUBc  | **** ||10001011| -/-   ||11001011| -/-   |
	|00001100| RELs  ||01001100| CMPx  | **** ||10001100| -/-   ||11001100| -/-   |
	|00001101| JMPo  ||01001101| CMPy  | **** ||10001101| -/-   ||11001101| -/-   |
	|00001110| JNL   ||01001110| PEN   | *00* ||10001110| -/-   ||11001110| -/-   |
	|00001111| PRDR  ||01001111| PEB   | *00* ||10001111| -/-   ||11001111| -/-   |
	|________|_______||________|_______|______||________|_______||________|_______|
	|00010000| PRDC  ||01010000| MULr  | **0* ||10010000| LUI   ||11010000| BRCi  |
	|00010001| -/-   ||01010001| MULi  | **0* ||10010001| -/-   ||11010001| -/-   |
	|00010010| -/-   ||01010010| UMLr  | *00* ||10010010| -/-   ||11010010| -/-   |
	|00010011| -/-   ||01010011| UMLi  | *00* ||10010011| -/-   ||11010011| -/-   |
	|00010100| -/-   ||01010100| SMLr  | *00* ||10010100| -/-   ||11010100| -/-   |
	|00010101| -/-   ||01010101| SMLi  | *00* ||10010101| -/-   ||11010101| -/-   |
	|00010110| -/-   ||01010110| ANDr  | *00* ||10010110| -/-   ||11010110| -/-   |
	|00010111| -/-   ||01010111| ANDi  | *00* ||10010111| -/-   ||11010111| -/-   |
	|00011000| PRDP  ||01011000| NNDr  | *00* ||10011000| -/-   ||11011000| BRPi  |
	|00011001| -/-   ||01011001| NNDi  | *00* ||10011001| -/-   ||11011001| -/-   |
	|00011010| -/-   ||01011010| IORr  | *00* ||10011010| -/-   ||11011010| -/-   |
	|00011011| -/-   ||01011011| IORi  | *00* ||10011011| -/-   ||11011011| -/-   |
	|00011100| -/-   ||01011100| NORr  | *00* ||10011100| -/-   ||11011100| -/-   |
	|00011101| -/-   ||01011101| NORi  | *00* ||10011101| -/-   ||11011101| -/-   |
	|00011110| -/-   ||01011110| XORr  | *00* ||10011110| -/-   ||11011110| -/-   |
	|00011111| -/-   ||01011111| XORi  | *00* ||10011111| -/-   ||11011111| -/-   |
	|________|_______||________|_______|______||________|_______||________|_______|
	|00100000| RBCC  ||01100000| BXTr  | 00*0 ||10100000| INP   ||11100000| LDry  |
	|00100001| -/-   ||01100001| BXTs  | 00*0 ||10101001| -/-   ||11100001| -LDry |
	|00100010| -/-   ||01100010| BDPr  |      ||10100010| -/-   ||11100010| LDry+ |
	|00100011| -/-   ||01100011| BDPs  |      ||10101011| -/-   ||11100011| +LDry |
	|00100100| -/-   ||01100100| BNGr  |      ||10100100| -/-   ||11100100| LDiy  |
	|00100101| -/-   ||01100101| BNGs  |      ||10101101| -/-   ||11100101| -LDiy |
	|00100110| -/-   ||01100110| RXTr  | 00*0 ||10100110| -/-   ||11100110| LDiy+ |
	|00100111| -/-   ||01100111| RXTs  | 00*0 ||10101111| -/-   ||11100111| +LDiy |
	|00101000| RBDC  ||01101000| RDPr  |      ||10100000| -/-   ||11101000| STry  |
	|00101001| -/-   ||01101001| RDPs  |      ||10101001| -/-   ||11101001| -STry |
	|00101010| -/-   ||01101010| RBRr  |      ||10100010| -/-   ||11101010| STry+ |
	|00101011| -/-   ||01101011| RBRs  |      ||10101011| -/-   ||11101011| +STry |
	|00101100| -/-   ||01101100| ASR   | *0** ||10100100| -/-   ||11101100| STiy  |
	|00101101| -/-   ||01101101| RST   |      ||10101101| -/-   ||11101101| -STiy |
	|00101110| -/-   ||01101110| ABRr  | *00* ||10100110| -/-   ||11101110| STiy+ |
	|00101111| -/-   ||01101111| ABRs  | *00* ||10101111| -/-   ||11101111| +STiy |
	|________|_______||________|_______|______||________|_______||________|_______|
	|00110000| RBCP  ||01110000| LSR   | *0** ||10110000| OUT   ||11110000| BRCo  |
	|00110001| -/-   ||01110001| LCR   | *0** ||10110001| -/-   ||11110001| -/-   |
	|00110010| -/-   ||01110010| LBRr  | *00* ||10110010| -/-   ||11110010| -/-   |
	|00110011| -/-   ||01110011| LBRs  | *00* ||10110011| -/-   ||11110011| -/-   |
	|00110100| -/-   ||01110100| LSL   | *0** ||10110100| -/-   ||11110100| -/-   |
	|00110101| -/-   ||01110101| LCL   | *0** ||10110101| -/-   ||11110101| -/-   |
	|00110110| -/-   ||01110110| LBLr  | *00* ||10110110| -/-   ||11110110| -/-   |
	|00110111| -/-   ||01110111| LBLs  | *00* ||10110111| -/-   ||11110111| -/-   |
	|00111000| RBDP  ||01111000| RBM   |      ||10111000| -/-   ||11111000| --    |
	|00111001| -/-   ||01111001| RBN   |      ||10111001| -/-   ||11111001| --    |
	|00111010| -/-   ||01111010| RBC   |      ||10111010| -/-   ||11111010| --    |
	|00111011| -/-   ||01111011| RBD   |      ||10111011| -/-   ||11111011| --    |
	|00111100| -/-   ||01111100| LDrx  |      ||10111100| -/-   ||11111100| --    |
	|00111101| -/-   ||01111101| LDix  |      ||10111101| -/-   ||11111101| --    |
	|00111110| -/-   ||01111110| STrx  |      ||10111110| -/-   ||11111110| --    |
	|00111111| -/-   ||01111111| STix  |      ||10111111| -/-   ||11111111| --    |
	|________|_______||________|_______|______||________|_______||________|_______|